name: inventory
services:

  postgresdb:
    image: postgres:16-alpine
    container_name: db-inventory
    restart: always
    mem_limit: 1G
    env_file:
      - .env
    ports:
      - '5432:5432'
    logging:
      options:
        max-size: 10m
        max-file: "3"
    networks:
      - monitoring-net
    volumes:
      - ../.data/db:/var/lib/postgresql/data

  backend:
    container_name: backend-inventory
    build:
      context: ../
      dockerfile: ./app/Dockerfile
    restart: always
    mem_limit: 1G
    depends_on:
      - postgresdb
    env_file:
      - .env
    networks:
      - monitoring-net
    volumes:
      - ../log:/application/app/logs

  nginx:
    build:
      dockerfile: ./Dockerfile
    container_name: nginx-inventory
    restart: always
    mem_limit: 512m
    volumes:
      - type: bind
        source: ./default.conf.conf
        target: /etc/nginx/templates/default.conf.conf

    environment:
      NGINX_ENVSUBST_TEMPLATE_SUFFIX: .conf
    ports:
      - "${HTTP_PORT}:80"
    networks:
      - monitoring-net

  redis:
    image: redis:8-alpine
    networks:
      - monitoring-net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      #- prometheusdata:/prometheus
    networks:
      - monitoring-net

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
  #     - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
  #     #- grafana:/var/lib/grafana
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - monitoring-net

# volumes:
#   prometheusdata:
#   grafana:

networks:
  monitoring-net:
    driver: bridge
